{"version":3,"sources":["CalcForm.js","App.js","index.js"],"names":["CalcForm","useState","location","setA","totalCost","setB","checked","setChecked","members","data","setData","columns","property","header","Text","primary","showTable","setShowTable","Form","FormField","name","value","onChange","target","label","type","Box","height","overflow","style","position","display","CheckBox","length","indeterminate","event","map","item","key","indexOf","e","filter","align","pad","Button","hoverIndicator","icon","LinkDown","onClick","cost","arr","d","push","Math","round","DataTable","step","theme","global","colors","brand","font","family","size","AppBar","props","tag","direction","justify","background","left","right","vertical","elevation","zIndex","App","showSidebar","setShowSidebar","Grommet","full","ResponsiveContext","Consumer","fill","Heading","level","margin","Calculator","flex","horizontal","Layer","FormClose","Collapsible","open","width","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.25d04ab7.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport { Box, Button, CheckBox, Form, FormField, TextArea, Text, DataTable } from 'grommet';\r\nimport { Add, LinkDown } from 'grommet-icons';\r\n\r\nfunction CalcForm() {\r\n    const [location, setA] = useState('');\r\n    const [totalCost, setB] = useState(0);\r\n    const [checked, setChecked] = useState([]);\r\n    const members = [\r\n        '김선균',\r\n        '명재환',\r\n        '양석우',\r\n        '유근영',\r\n        '유수혁',\r\n        '윤성현',\r\n        '장태양',\r\n        '최기석',\r\n    ];\r\n\r\n    const [text, setText] = useState(' ');\r\n    const [data, setData] = useState([]);\r\n    const columns = [\r\n        { property: 'name', header: <Text>이름</Text>, primary: true },\r\n        { property: 'location', header: '장소' },\r\n        { property: 'cost', header: '비용' },\r\n    ];\r\n    const [showTable, setShowTable] = useState(false);\r\n\r\n    function handleChangeA({ target }) {\r\n        setA(target.value);\r\n    }\r\n\r\n    function handleChangeB({ target }) {\r\n        setB(target.value);\r\n    }\r\n\r\n    function toSave() {\r\n        let cost = totalCost / checked.length;\r\n        let arr = [];\r\n        checked.map(d => {\r\n            arr.push({\r\n                name: d,\r\n                location: location,\r\n                cost: Math.round(cost),\r\n            });\r\n        });\r\n        // let toString = arr.map(d => JSON.stringify(d) + '\\n');\r\n        // setText(toString);\r\n        setShowTable(true);\r\n        setData(arr);\r\n    }\r\n\r\n    function onCheckAll(event) {\r\n        if (event.target.checked) {\r\n            setChecked(members);\r\n        } else {\r\n            setChecked([]);\r\n        }\r\n    }\r\n\r\n    function onCheck(event, value) {\r\n        if (event.target.checked) {\r\n            setChecked([...checked, value]);\r\n        } else {\r\n            setChecked(checked.filter(item => item !== value));\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <Form>\r\n                <FormField name=\"location\" value={location} onChange={handleChangeA} label=\"장소\" />\r\n                <FormField\r\n                    name=\"totalCost\"\r\n                    value={totalCost}\r\n                    onChange={handleChangeB}\r\n                    label=\"총금액\"\r\n                    type=\"number\"\r\n                />\r\n                <Box\r\n                    height=\"120px\"\r\n                    overflow=\"auto\"\r\n                    style={{\r\n                        position: 'relative',\r\n                        display: 'block',\r\n                    }}\r\n                >\r\n                    <CheckBox\r\n                        checked={checked.length === 8}\r\n                        indeterminate={checked.length > 0 && checked.length < 8}\r\n                        label=\"All\"\r\n                        onChange={onCheckAll}\r\n                    />\r\n                    {members.map(item => (\r\n                        <CheckBox\r\n                            key={item}\r\n                            checked={checked.indexOf(item) !== -1}\r\n                            label={item}\r\n                            onChange={e => onCheck(e, item)}\r\n                        />\r\n                    ))}\r\n                </Box>\r\n                <Box align=\"center\" pad=\"large\">\r\n                    <Button hoverIndicator icon={<LinkDown />} onClick={toSave} />\r\n                </Box>\r\n            </Form>\r\n            {/* <TextArea value={text} /> */}\r\n            {showTable ? (\r\n                <Box align=\"center\" pad=\"large\">\r\n                    <DataTable columns={columns} data={data} step={10} />\r\n                </Box>\r\n            ) : (\r\n                ''\r\n            )}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default CalcForm;\r\n","import React, { useState } from 'react';\r\nimport { Box, Button, Collapsible, Heading, Grommet, Layer, ResponsiveContext } from 'grommet';\r\nimport { FormClose, Calculator } from 'grommet-icons';\r\nimport CalcForm from './CalcForm';\r\n\r\nconst theme = {\r\n    global: {\r\n        colors: {\r\n            brand: '#228BE6',\r\n        },\r\n        font: {\r\n            family: 'Jua',\r\n            size: '20px',\r\n            height: '20px',\r\n        },\r\n    },\r\n};\r\n\r\nconst AppBar = props => (\r\n    <Box\r\n        tag=\"header\"\r\n        direction=\"row\"\r\n        align=\"center\"\r\n        justify=\"between\"\r\n        background=\"brand\"\r\n        pad={{ left: 'medium', right: 'small', vertical: 'small' }}\r\n        elevation=\"medium\"\r\n        style={{ zIndex: '1' }}\r\n        {...props}\r\n    />\r\n);\r\n\r\nfunction App() {\r\n    const [showSidebar, setShowSidebar] = useState(false);\r\n\r\n    return (\r\n        <Grommet theme={theme} full>\r\n            <ResponsiveContext.Consumer>\r\n                {size => (\r\n                    <Box fill>\r\n                        <AppBar>\r\n                            <Heading level=\"2\" margin=\"none\">\r\n                                회식비 계산\r\n                            </Heading>\r\n                            <Button\r\n                                icon={<Calculator />}\r\n                                onClick={() => setShowSidebar(!showSidebar)}\r\n                            />\r\n                        </AppBar>\r\n                        <Box direction=\"row\" flex overflow={{ horizontal: 'hidden' }}>\r\n                            <Box flex align=\"center\" justify=\"center\">\r\n                                <CalcForm />\r\n                            </Box>\r\n                            {!showSidebar || size !== 'small' ? (\r\n                                <Collapsible direction=\"horizontal\" open={showSidebar}>\r\n                                    <Box\r\n                                        flex\r\n                                        width=\"medium\"\r\n                                        background=\"light-2\"\r\n                                        elevation=\"small\"\r\n                                        align=\"center\"\r\n                                        justify=\"center\"\r\n                                    >\r\n                                        sidebar1\r\n                                    </Box>\r\n                                </Collapsible>\r\n                            ) : (\r\n                                <Layer>\r\n                                    <Box\r\n                                        background=\"light-2\"\r\n                                        tag=\"header\"\r\n                                        justify=\"end\"\r\n                                        align=\"center\"\r\n                                        direction=\"row\"\r\n                                    >\r\n                                        <Button\r\n                                            icon={<FormClose size=\"large\" />}\r\n                                            onClick={() => setShowSidebar(false)}\r\n                                        />\r\n                                    </Box>\r\n                                    <Box fill background=\"light-2\" align=\"center\" justify=\"center\">\r\n                                        sidebar2\r\n                                    </Box>\r\n                                </Layer>\r\n                            )}\r\n                        </Box>\r\n                    </Box>\r\n                )}\r\n            </ResponsiveContext.Consumer>\r\n        </Grommet>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));"],"sourceRoot":""}